name: Publish to PyPi and upload executable

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Release:
  #   runs-on: 'ubuntu-latest'
  #   strategy:
  #     fail-fast: false
  #   outputs:
  #     tag: ${{ steps.output_tag.outputs.tag }}

  #   steps:
  #   - uses: actions/checkout@master
  #   - name: Get version of python package
  #     uses: maybe-hello-world/pyproject-check-version@v4
  #     id: getversion
  #     with:
  #       pyproject-path: "./pyproject.toml"

  #   - name: Create release
  #     id: create_release
  #     uses: actions/create-release@latest
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ steps.getversion.outputs.local_version }}
  #       release_name: Release ${{ steps.getversion.outputs.local_version }}
  #       body: |
  #         GameArt ${{ steps.getversion.outputs.local_version }}
  #       draft: false
  #       prerelease: false

  #   - name: Output tag
  #     id: output_tag
  #     run: echo "tag=${{ steps.getversion.outputs.local_version }}" >> "$GITHUB_OUTPUT"

  # PyPi:
  #   needs: Release
  #   runs-on: 'ubuntu-latest'
  #   strategy:
  #     fail-fast: false

  #   steps:
  #   - uses: actions/checkout@master
  #   - uses: actions/setup-python@v3
  #     with:
  #       python-version: "3.12"
  #   - name: Create virtual environment
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m venv env
  #       source env/bin/activate
  #       echo "VIRTUAL ENV:" $VIRTUAL_ENV
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install .[release]

  #   - name: Build package
  #     run: python -m build
  #   - name: Publish package
  #     uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
  #     with:
  #       user: __token__
  #       password: ${{ secrets.PYPI_API_TOKEN }}

  PyInstaller:
    #needs: Release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'ubuntu-latest']
        include:
          - os: 'windows-latest'
            activate: 'env\Scripts\activate'
          - os: 'ubuntu-latest'
            activate: 'source env/bin/activate'

    steps:
    - uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Create virtual environment
      run: |
        python -m pip install --upgrade pip
        python -m venv env
        ${{ matrix.activate }}
        echo "VIRTUAL ENV:" $VIRTUAL_ENV

    - name: Check out pyinstaller
      uses: actions/checkout@master
      with:
        repository: pyinstaller/pyinstaller
        path: 'pyinstaller'
    - name: Build bootloader of pyinstaller
      run: |
        cd pyinstaller/bootloader/
        python ./waf all
    - name: Install pyinstaller
      run: |
        cd pyinstaller
        python -m pip install .

    - uses: actions/checkout@master
    - name: Install dependencies
      run: |
        python -m pip install .[release]

    - name: Create executable
      run: pyinstaller --onefile ./src/gameart/gui.py --icon ./images/logo.png --distpath ./gameart --name gameart
    - uses: actions/upload-artifact@v3
      with:
        path: gameart/*

    # - name: Add gameart executable to release
    #   uses: softprops/action-gh-release@v1
    #   with:
    #     tag_name: ${{ needs.Release.outputs.tag }}
    #     files: gameart/*
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
