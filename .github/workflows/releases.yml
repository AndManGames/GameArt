name: Publish to PyPi and upload executable

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  Release:
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v3
    - name: Get version
      uses: maybe-hello-world/pyproject-check-version@v4
      id: getversion
      with:
        pyproject-path: "./pyproject.toml"

    - name: Create release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.getversion.outputs.local_version }}
        release_name: Release ${{ steps.getversion.outputs.local_version }}
        body: |
          GameArt ${{ steps.getversion.outputs.local_version }}
        draft: false
        prerelease: false

  PyPi:
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Create virtual environment
      run: |
        python -m pip install --upgrade pip
        python -m venv env
        source env/bin/activate
        echo "VIRTUAL ENV:" $VIRTUAL_ENV
    - name: Install dependencies
      run: |
        python -m pip install .[release]

    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

  PyInstaller:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['windows-latest', 'ubuntu-latest']
        include:
          - os: 'windows-latest'
            activate: 'env\Scripts\activate'
          - os: 'ubuntu-latest'
            activate: 'source env/bin/activate'

    steps:
    - uses: actions/checkout@v3
    - name: Get Latest Tag
      id: latesttag
      uses: WyriHaximus/github-action-get-previous-tag@v1.3.0

    - uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Create virtual environment
      run: |
        python -m pip install --upgrade pip
        python -m venv env
        ${{ matrix.activate }}
        echo "VIRTUAL ENV:" $VIRTUAL_ENV
    - name: Install dependencies
      run: |
        python -m pip install .[release]

    - run: pyinstaller --onefile ./src/gameart/gui.py --icon ./images/logo.png --distpath ./gameart --name gameart
    - uses: actions/upload-artifact@v3
      with:
        path: gameart/*
    - name: Set Tag
      id: vars
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
    - name: Check Tag
      env:
        RELEASE_TAG: ${{ steps.vars.outputs.tag }}
      run: |
        echo $RELEASE_TAG
        echo ${{ steps.vars.outputs.tag }}
    - name: Add gameart.exe to release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, ${{ steps.latesttag.outputs.tag }})
      with:
        files: gameart/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
