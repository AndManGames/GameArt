# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Pull Request Checks

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  check_if_version_updated:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Get version of python package
        uses: maybe-hello-world/pyproject-check-version@v4
        id: getversion
        with:
          pyproject-path: "./pyproject.toml"

      - name: Output versions
        run: |
            echo "Local version: ${{ steps.getversion.outputs.local_version }}"
            echo "Public version: ${{ steps.getversion.outputs.public_version }}"
            echo "Version updated? ${{ steps.getversion.outputs.local_version_is_higher }}"

      - name: Check if version updated
        if: ${{ steps.getversion.outputs.local_version_is_higher == 'False' }}
        continue-on-error: false
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('Version in ./pyproject.toml has not been updated')

  build:
    needs: check_if_version_updated
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Create Virtual environment
      run: |
        python -m pip install --upgrade pip
        python -m venv env
        source env/bin/activate
        echo "VIRTUAL ENV:" $VIRTUAL_ENV
    - name: Install dependencies
      run: |
        python -m pip install .[dev]

    - name: Check with pre-commit (Formatting, Linting, etc.)
      run: |
        pre-commit run --all-files

    - name: Test with pytest
      run: |
        pytest

  auto-approve-if-codeowner:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    if: github.actor == 'AndManGames'
    steps:
      - uses: hmarr/auto-approve-action@v3
        with:
          review-message: "Auto approved because PR was created by codeowner."
